name: Swift Build & Test, Xcode Build & Test

on:
  # push:
  pull_request:

env:
  SCHEME_NAME: TRETNFCKit-Package
  IOS_SIMULATOR_NAME: iPhone 13 mini
  TVOS_SIMULATOR_NAME: Apple TV 4K (2nd generation)
  WATCHOS_SIMULATOR_NAME: Apple Watch Series 7 - 45mm

jobs:
  setup:
    name: set up workflow
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Show Xcode list
      run: ls -n /Applications | grep 'Xcode'
    - name: Show the default version of Xcode
      run: xcodebuild -version
    - name: Show lists the targets and configurations in a project, or the schemes in a workspace
      run: xcodebuild -list
    - name: Show a list of destinations
      run: xcodebuild test -scheme ${{ env.SCHEME_NAME }} -showdestinations
    - name: Show xcpretty version
      run: xcpretty --version
    
  swift_build:
    name: swift build
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Swift version
      run: swift --version
    - name: Build
      if: ${{ matrix.os == 'macos-11' }}
      run: swift build -v | tee swift-build-${{ matrix.os }}_x86_64.log && exit ${PIPESTATUS[0]}
    - name: Build with enable test discovery on platforms without Objective-C runtime
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: swift build -v --enable-test-discovery | tee swift-build-${{ matrix.os }}_x86_64.log && exit ${PIPESTATUS[0]}
    - name: Upload swift build log
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: swift build log (${{ matrix.os }}, x86_64)
        path: swift-build-${{ matrix.os }}_x86_64.log
  
  swift_test:
    name: swift test
    needs: swift_build
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Swift version
      run: swift --version
    - name: Run tests
      if: ${{ matrix.os == 'macos-11' }}
      run: swift test -v | tee swift-test-${{ matrix.os }}_x86_64.log && exit ${PIPESTATUS[0]}
    - name: Run tests with enable test discovery on platforms without Objective-C runtime
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: swift test -v --enable-test-discovery | tee swift-test-${{ matrix.os }}_x86_64.log && exit ${PIPESTATUS[0]}
    - name: Upload swift test log
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: swift test log (${{ matrix.os }}, x86_64)
        path: swift-test-${{ matrix.os }}_x86_64.log
  
  xcodebuild_12-5-1_ios:
    name: xcodebuild (Xcode 12.5.1) (iOS)
    runs-on: macos-11
    needs: setup
    steps:
    - uses: actions/checkout@v2
    - name: Set xcode-select path
      run: sudo xcode-select -s /Applications/Xcode_12.5.1.app/Contents/Developer
    - name: Xcode build
      run: xcodebuild -scheme ${{ env.SCHEME_NAME }} -destination 'name=iPhone 12 mini' | tee xcodebuild-12.5.1-ios.log | xcpretty --color --report html && exit ${PIPESTATUS[0]}
    - name: Upload xcode build report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: xcodebuild log and report (iOS)
        path: |
            xcodebuild-12.5.1-ios.log
            build/reports/build.html
  
  xcodebuild_test_12-5-1:
    name: Xcode 12.5.1 Test
    runs-on: macos-11
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        platform: [iOS]
    steps:
    - uses: actions/checkout@v2
    - name: Set xcode-select path
      run: sudo xcode-select -s /Applications/Xcode_12.5.1.app/Contents/Developer
    - name: Xcode test
      if: ${{ matrix.platform == 'iOS' }}
      run: xcodebuild test -scheme ${{ env.SCHEME_NAME }} -destination 'name=${{ env.IOS_SIMULATOR_NAME }}' | tee xcodebuild-test-${{ matrix.platform }}.log | xcpretty --color --report html && exit ${PIPESTATUS[0]}
    - name: Xcode test
      if: ${{ matrix.platform == 'macOS' }}
      run: xcodebuild test -scheme ${{ env.SCHEME_NAME }} -destination 'platform=macOS,arch=x86_64' | tee xcodebuild-test-${{ matrix.platform }}.log | xcpretty --color --report html && exit ${PIPESTATUS[0]}
    - name: Xcode test
      if: ${{ matrix.platform == 'tvOS' }}
      run: xcodebuild test -scheme ${{ env.SCHEME_NAME }} -destination 'name=${{ env.TVOS_SIMULATOR_NAME }}' | tee xcodebuild-test-${{ matrix.platform }}.log | xcpretty --color --report html && exit ${PIPESTATUS[0]}
    - name: Xcode test
      if: ${{ matrix.platform == 'watchOS' }}
      run: xcodebuild test -scheme ${{ env.SCHEME_NAME }} -destination 'name=${{ env.WATCHOS_SIMULATOR_NAME }}' | tee xcodebuild-test-${{ matrix.platform }}.log | xcpretty --color --report html && exit ${PIPESTATUS[0]}
    - name: Upload Xcode DerivedData
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Xcode DerivedData (Xcode 12.5.1 ${{ matrix.platform }})
        path: |
            /Users/runner/Library/Developer/Xcode/DerivedData
    - name: Upload xcode test report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: xcodebuild test log and report (Xcode 12.5.1 ${{ matrix.platform }})
        path: |
            xcodebuild-test-${{ matrix.platform }}.log
            build/reports/tests.html
  
  xcodebuild_test_13-1:
    name: Xcode 13.1 Test
    runs-on: macos-11
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        platform: [iOS, macOS, tvOS, watchOS]
    steps:
    - uses: actions/checkout@v2
    - name: Set xcode-select path
      run: sudo xcode-select -s /Applications/Xcode_13.1.app/Contents/Developer
    - name: Xcode test
      if: ${{ matrix.platform == 'iOS' }}
      run: xcodebuild test -scheme ${{ env.SCHEME_NAME }} -destination 'name=${{ env.IOS_SIMULATOR_NAME }}' | tee xcodebuild-test-${{ matrix.platform }}.log | xcpretty --color --report html && exit ${PIPESTATUS[0]}
    - name: Xcode test
      if: ${{ matrix.platform == 'macOS' }}
      run: xcodebuild test -scheme ${{ env.SCHEME_NAME }} -destination 'platform=macOS,arch=x86_64' | tee xcodebuild-test-${{ matrix.platform }}.log | xcpretty --color --report html && exit ${PIPESTATUS[0]}
    - name: Xcode test
      if: ${{ matrix.platform == 'tvOS' }}
      run: xcodebuild test -scheme ${{ env.SCHEME_NAME }} -destination 'name=${{ env.TVOS_SIMULATOR_NAME }}' | tee xcodebuild-test-${{ matrix.platform }}.log | xcpretty --color --report html && exit ${PIPESTATUS[0]}
    - name: Xcode test
      if: ${{ matrix.platform == 'watchOS' }}
      run: xcodebuild test -scheme ${{ env.SCHEME_NAME }} -destination 'name=${{ env.WATCHOS_SIMULATOR_NAME }}' | tee xcodebuild-test-${{ matrix.platform }}.log | xcpretty --color --report html && exit ${PIPESTATUS[0]}
    - name: Upload Xcode DerivedData
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Xcode DerivedData (Xcode 13.1 ${{ matrix.platform }})
        path: |
            /Users/runner/Library/Developer/Xcode/DerivedData
    - name: Upload xcode test report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: xcodebuild test log and report (Xcode 13.1 ${{ matrix.platform }})
        path: |
            xcodebuild-test-${{ matrix.platform }}.log
            build/reports/tests.html
