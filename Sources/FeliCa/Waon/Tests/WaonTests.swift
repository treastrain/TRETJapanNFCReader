//
//  WaonTests.swift
//  TRETJapanNFCReader
//
//  Created by treastrain on 2020/08/19.
//  Copyright Â© 2020 treastrain / Tanaka Ryoga. All rights reserved.
//

import XCTest
import TRETJapanNFCReader_FeliCa
@testable import TRETJapanNFCReader_FeliCa_Waon

final class WaonTests: XCTestCase {
    func testWaonCardDataInit() {
        let systemCode: FeliCaSystemCode = 0xFE00
        let idm = "1114b454c1117923"
        let pmm = "0120220427674eff"
        let data: FeliCaData = [
            systemCode : FeliCaSystem(systemCode: systemCode, idm: idm, pmm: pmm, services: [
                0x6817 : FeliCaBlockData(status1: 0, status2: 0, blockData: [
                    Data([0x2B, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A])
                ]),
                0x684F : FeliCaBlockData(status1: 0, status2: 0, blockData: [
                    Data([0x69, 0x00, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
                    Data([0x8E, 0x0B, 0xEA, 0xC8, 0xE6, 0x07, 0xF3, 0xEA, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
                ]),
                0x684B : FeliCaBlockData(status1: 0, status2: 0, blockData: [
                    Data([0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x19, 0x09, 0x01, 0x00, 0x00]),
                    Data([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
                    Data([0x28, 0x09, 0xFB, 0x9F, 0x8A, 0x12, 0xEA, 0x1D, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
                ]),
                0x680B : FeliCaBlockData(status1: 0, status2: 0, blockData: [
                    Data([0x30, 0x32, 0x30, 0x30, 0x30, 0x31, 0x31, 0x30, 0x30, 0x31, 0x35, 0x36, 0x38, 0x00, 0x3A, 0xF4]),
                    Data([0x4A, 0x04, 0x74, 0x85, 0x55, 0x00, 0x05, 0x60, 0x3F, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
                    Data([0x30, 0x32, 0x30, 0x30, 0x30, 0x31, 0x33, 0x30, 0x30, 0x34, 0x38, 0x32, 0x33, 0x00, 0x38, 0x92]),
                    Data([0x9C, 0x04, 0x74, 0x66, 0x7A, 0x80, 0x08, 0x80, 0x04, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
                    Data([0x30, 0x32, 0x30, 0x30, 0x30, 0x31, 0x31, 0x30, 0x30, 0x31, 0x35, 0x36, 0x38, 0x00, 0x39, 0xF4]),
                    Data([0x49, 0x0C, 0x74, 0x85, 0x55, 0x01, 0x02, 0x80, 0x00, 0x00, 0x1F, 0x40, 0x40, 0x00, 0x00, 0x00]),
                    Data([0x00, 0x00, 0x00, 0x40, 0x1F, 0xA4, 0x08, 0x00, 0x1F, 0xA4, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00]),
                    Data([0x40, 0x19, 0x09, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
                    Data([0x23, 0x67, 0xA9, 0x03, 0x54, 0x18, 0x42, 0x24, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
                ])
            ])
        ]
        let cardData = WaonCardData(idm: idm, systemCode: systemCode, data: data)
        let transactions = [
            WaonCardTransaction(date: "2019-09-01 10:42:00 +0900".date, type: .purchase, otherType: nil, difference: 2025, balance: 43),
            WaonCardTransaction(date: "2019-09-01 10:42:00 +0900".date, type: .credit, otherType: nil, difference: 2000, balance: 2068),
            WaonCardTransaction(date: "2019-08-25 19:53:00 +0900".date, type: .purchase, otherType: nil, difference: 140, balance: 68)
        ]
        
        XCTAssertEqual(cardData.version, "3")
        XCTAssertEqual(cardData.type, FeliCaCardType.waon)
        XCTAssertEqual(cardData.primaryIDm, idm)
        XCTAssertEqual(cardData.primarySystemCode, systemCode)
        XCTAssertEqual(cardData.contents, data)
        XCTAssertEqual(cardData.balance, 43)
        XCTAssertEqual(cardData.waonNumber, "6900 1234 5678 9012")
        XCTAssertEqual(cardData.points, 4)
        XCTAssertNotNil(cardData.transactions)
        for (cardDataTransaction, dummyTransaction) in zip(cardData.transactions!, transactions) {
            XCTAssertEqual(cardDataTransaction.date, dummyTransaction.date)
            XCTAssertEqual(cardDataTransaction.type, dummyTransaction.type)
            XCTAssertEqual(cardDataTransaction.otherType, dummyTransaction.otherType)
            XCTAssertEqual(cardDataTransaction.difference, dummyTransaction.difference)
            XCTAssertEqual(cardDataTransaction.balance, dummyTransaction.balance)
        }
    }
}

extension String {
    var date: Date {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss Z"
        dateFormatter.locale = Locale(identifier: "en_US_POSIX")
        return dateFormatter.date(from: self)!
    }
}
